/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package androidx.build.gradle.gcpbuildcache

import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder
import org.junit.runner.RunWith
import org.junit.runners.Parameterized

/**
 * A simple functional test for the 'androidx.build.gradle.gcpbuildcache.GcpBuildCache' plugin.
 */
@RunWith(Parameterized::class)
class GcpGradleBuildCachePluginFunctionalTest(private val gradleVersion: String) {
    companion object {
        @get:JvmStatic
        @get:Parameterized.Parameters(name = "gradleVersion={0}")
        @Suppress("unused") // needed for Parameterized
        val params = listOf(
            arrayOf("8.4"),
            arrayOf("8.5"),
            arrayOf("8.11.1"),
            arrayOf("8.14"),
            arrayOf("9.0.0"),
            arrayOf("9.1.0"),
        )
    }

    @get:Rule val tempFolder = TemporaryFolder()

    private fun getProjectDir() = tempFolder.root
    private fun getBuildFile() = getProjectDir().resolve("build.gradle.kts")
    private fun getSettingsFile() = getProjectDir().resolve("settings.gradle.kts")

    @Test
    fun `can run tasks task`() {
        // Setup the test build
        getSettingsFile().writeText("""
            import androidx.build.gradle.gcpbuildcache.ExportedKeyGcpCredentials

            plugins {
                id("androidx.build.gradle.gcpbuildcache")
            }
            
            buildCache {
                remote(androidx.build.gradle.gcpbuildcache.GcpBuildCache::class) {
                    projectId = "foo"
                    bucketName = "bar"
                    credentials = ExportedKeyGcpCredentials(File("path/to/credentials.json"))
                }
            }
        """.trimIndent())
        getBuildFile().writeText("")

        // Run the build
        GradleRunner.create()
            .forwardOutput()
            .withGradleVersion(gradleVersion)
            .withPluginClasspath()
            .withArguments("tasks", "-s")
            .withProjectDir(getProjectDir())
            .build();
    }
}
